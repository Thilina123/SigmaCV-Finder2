From Wikipedia, the free encyclopedia   (Redirected from AJAX) Jump to: navigation, search "AJAX" redirects here. For other uses, see Ajax. Ajax (also AJAX; /ˈeɪdʒæks/; short for asynchronous JavaScript + XML)[1][2][3] is a group of interrelated Web development techniques used on the client-side to create asynchronous Web applications. With Ajax, Web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. Data can be retrieved using the XMLHttpRequest object. Despite the name, the use of XML is not required; JSON is often used instead (see AJAJ), and the requests do not need to be asynchronous.[4] Ajax is not a single technology, but a group of technologies. HTML and CSS can be used in combination to mark up and style information. The DOM is accessed with JavaScript to dynamically display – and allow the user to interact with – the information presented. JavaScript and the XMLHttpRequest object provide a method for exchanging data asynchronously between browser and server to avoid full page reloads. Contents 1 History 2 Technologies 3 Drawbacks 4 Example 5 See also 6 References 7 External links History[edit] In the early 1990s, most Web sites were based on complete HTML pages. Each user action required that a complete page be loaded from the server. This process was inefficient, as reflected by the user experience: all page content disappeared, then reappeared. Each time the browser reloaded a page because of a partial change, all of the content had to be re-sent, even though only some of the information had changed. This placed additional load on the server and used excessive bandwidth. In 1996, the iframe tag was introduced by Internet Explorer to load or to fetch content asynchronously. In 1998, Microsoft Outlook Web App team implemented the first component XMLHTTP by client script. In 1999, Microsoft used its iframe technology to dynamically update the news stories and stock quotes on the default page for Internet Explorer,[5] and created the XMLHTTP ActiveX control in Internet Explorer 5, which was later adopted by Mozilla, Safari, Opera and other browsers as the XMLHttpRequest JavaScript object.[6] Microsoft has adopted the native XMLHttpRequest model as of Internet Explorer 7, though the ActiveX version is still supported. The utility of background HTTP requests to the server and asynchronous Web technologies remained fairly obscure until it started appearing in full scale online applications such as Outlook Web App (2000)[7] and Oddpost (2002). Google made a wide deployment of standards-compliant, cross browser Ajax with Gmail (2004) and Google Maps (2005).[8] In October 2004 Kayak.com's public beta release was among the first large-scale e-commerce uses of what their developers at that time called "the xml http thing".[9] The term "Ajax" was publicly stated on 18 February 2005 by Jesse James Garrett in an article titled "Ajax: A New Approach to Web Applications", based on techniques used on Google pages.[3] On 5 April 2006, the World Wide Web Consortium (W3C) released the first draft specification for the XMLHttpRequest object in an attempt to create an official Web standard.[8] Technologies[edit] The term Ajax has come to represent a broad group of Web technologies that can be used to implement a Web application that communicates with a server in the background, without interfering with the current state of the page. In the article that coined the term Ajax,[3] Jesse James Garrett explained that the following technologies are incorporated: HTML (or XHTML) and CSS for presentation The Document Object Model (DOM) for dynamic display of and interaction with data XML for the interchange of data, and XSLT for its manipulation The XMLHttpRequest object for asynchronous communication JavaScript to bring these technologies together Since then, however, there have been a number of developments in the technologies used in an Ajax application, and the definition of the term Ajax. XML is not required for data interchange and, therefore, XSLT is not required for the manipulation of data. JavaScript Object Notation (JSON) is often used as an alternative format for data interchange,[10] although other formats such as preformatted HTML or plain text can also be used.[11] Asynchronous HTML and HTTP (AHAH) involves using XMLHTTPRequest to retrieve (X)HTML fragments, which are then inserted directly into the Web page. Drawbacks[edit] In pre-HTML5 browsers, pages dynamically created using successive Ajax requests did not automatically register themselves with the browser's history engine, so clicking the browser's "back" button may not have returned the browser to an earlier state of the Ajax-enabled page, but may have instead returned to the last full page visited before it. Such behavior — navigating between pages instead of navigating between page states — may be desirable, but if fine-grained tracking of page state is required, then a pre-HTML5 workaround was to use invisible iframes to trigger changes in the browser's history. A workaround implemented by Ajax techniques is to change the URL fragment identifier (the part of a URL after the "#") when an Ajax-enabled page is accessed and monitor it for changes.[12][13] HTML5 provides an extensive API standard for working with the browser's history engine.[14] Dynamic Web page updates also make it difficult to bookmark and return to a particular state of the application. Solutions to this problem exist, many of which again use the URL fragment identifier.[12][13] The solution provided by HTML5 for the above problem also applies for this.[14] Depending on the nature of the Ajax application, dynamic page updates may interfere disruptively with user interactions, especially if working on an unstable Internet connection. For instance, editing a search field may trigger a query to the server for search completions, but the user may not know that a search completion popup is forthcoming, and if the internet connection is slow, the popup list may show up at an inconvenient time, when the user has already proceeded to do something else. Most Web crawlers do not execute JavaScript code,[15] so in order to be indexed by search engines, a Web application must provide an alternative means of accessing the content that would normally be retrieved with Ajax. Any user whose browser does not support JavaScript or XMLHttpRequest, or simply has this functionality disabled, will not be able to properly use pages which depend on Ajax. Devices such as smartphones and PDAs may not have support for the required technologies, though this is becoming less of a problem. The only way to let the user carry out functionality is to fall back to non-JavaScript methods. This can be achieved by making sure links and forms can be resolved properly and not relying solely on Ajax.[16] Similarly, some Web applications that use Ajax are built in a way that cannot be read by screen-reading technologies, such as JAWS. The WAI-ARIA standards provide a way to provide hints in such a case.[17] Screen readers that are able to use Ajax may still not be able to properly read the dynamically generated content.[18] The same origin policy prevents some Ajax techniques from being used across domains,[8] although the W3C has a draft of the XMLHttpRequest object that would enable this functionality.[19] Methods exist to sidestep this security feature by using a special Cross Domain Communications channel embedded as an iframe within a page,[20] or by the use of JSONP. The asynchronous callback-style of programming required can lead to complex code that is hard to maintain, to debug[21] and to test.[22] Example[edit] Here is an example of a simple Ajax request using the GET method, written in JavaScript. get-ajax-data.js: 
// This is the client-side script
 
// Initialize the Ajax request
var xhr = new XMLHttpRequest();
xhr.open('get', 'send-ajax-data.php');
 
// Track the state changes of the request
xhr.onreadystatechange = function(){
    // Ready state 4 means the request is done
    if(xhr.readyState === 4){
        // 200 is a successful return
        if(xhr.status === 200){
            alert(xhr.responseText); // 'This is the returned text.'
        }else{
            alert('Error: '+xhr.status); // An error occurred during the request
        }
    }
}
 
// Send the request to send-ajax-data.php
xhr.send(null);
 send-ajax-data.php: 
<?php
// This is the server-side script
 
// Set the content type
header('Content-Type: text/plain');
 
// Send the data back
echo "This is the returned text.";
?>
 jQuery example This example uses the popular JavaScript library jQuery, to do the same thing as the example above. 
$.get('send-ajax-data.php', function(data) {
    alert(data);
});
 See also[edit] Ajax framework List of Ajax frameworks AJAX Service Bus Comet (programming) (also known as Reverse Ajax) Rich Internet application WebSocket ActionScript References[edit] ^ http://shiflett.org/blog/2007/apr/ajax-is-not-an-acronym ^ https://blogs.oracle.com/arungupta/entry/ajax_vs_ajax_ajax_ofcourse ^ a b c Jesse James Garrett (18 February 2005). "Ajax: A New Approach to Web Applications". AdaptivePath.com. Archived from the original on 2 July 2008. Retrieved 19 June 2008.  ^ Ullman, Chris (March 2007). Beginning Ajax. wrox. ISBN 978-0-470-10675-4. Archived from the original on 5 July 2008. Retrieved 24 June 2008.  ^ MSN.com. Home.microsoft.com (1999-12-31). Retrieved on 2013-07-13. ^ "Dynamic HTML and XML: The XMLHttpRequest Object". Apple Inc. Retrieved 25 June 2008.  ^ Hopmann, Alex. "Story of XMLHTTP". Alex Hopmann’s Blog. Retrieved 17 May 2010.  ^ a b c "A Brief History of Ajax". Aaron Swartz. 22 December 2005. Retrieved 4 August 2009.  ^ English, Paul. "Kayak User Interface". OFFICIAL KAYAK.COM TECHNOBLOG. Retrieved 22 May 2014.  ^ "JavaScript Object Notation". Apache.org. Archived from the original on 16 June 2008. Retrieved 4 July 2008.  ^ "Speed Up Your Ajax-based Apps with JSON". DevX.com. Archived from the original on 4 July 2008. Retrieved 4 July 2008.  ^ a b "Why use Ajax?". InterAKT. 10 November 2005. Archived from the original on 29 May 2008. Retrieved 26 June 2008.  ^ a b "Deep Linking for AJAX".  ^ a b "HTML5 specification". Retrieved 21 October 2011.  ^ Prokoph, Andreas (8 May 2007). "Help Web crawlers efficiently crawl your portal sites and Web sites". IBM. Retrieved 22 April 2009.  ^ Quinsey, Peter. "User-proofing Ajax".  ^ "WAI-ARIA Overview". http://www.w3.org/. Archived from the original on 26 October 2010. Retrieved 21 October 2010.  ^ Edwards, James (5 May 2006). "Ajax and Screenreaders: When Can it Work?". sitepoint.com. Retrieved 27 June 2008.  ^ "Access Control for Cross-Site Requests". World Wide Web Consortium. Archived from the original on 14 May 2008. Retrieved 27 June 2008.  ^ "Secure Cross-Domain Communication in the Browser". The Architecture Journal (MSDN). Archived from the original on 29 March 2010. Retrieved 27 April 2010.  ^ Cuthbertson, Tim. "What is asynchronous programming, and why is it so damn awkward?". http://gfxmonk.net/. Retrieved 19 October 2010.  ^ "Selenium documentation: Fetching a Page". http://seleniumhq.org/. Retrieved 6 October 2011.  It is worth noting that if your page uses a lot of Ajax on load then WebDriver may not know when it has completely loaded. If you need to ensure such pages are fully loaded, then you can use Explicit and Implicit Waits. External links[edit] Wikimedia Commons has media related to AJAX (programming). Wikibooks has a book on the topic of: AJAX Ajax: A New Approach to Web Applications — Article that coined the AJAX term and Q&A Ajax (programming) at DMOZ Ajax Tutorial with GET, POST, text and XML examples. v t e Cloud computing Applications Google Apps for Work Drive ownCloud Microsoft Online Salesforce ContactOffice HP Converged Cloud Platforms Amazon App Engine GreenQloud AppScale Microsoft Azure Engine Yard eXo Platform OutSystems Force.com Heroku Inktank OrangeScape RightScale Cloud Foundry Mendix OpenShift Jelastic openQRM VMware vCloud Air Infrastructure Amazon Abiquo Enterprise Edition CloudStack EMC Atmos Eucalyptus Fujitsu GoGrid Lunacloud Google Storage GreenButton GreenQloud IBM cloud computing iland Joyent Nimbula Nimbus OpenNebula OpenStack OrionVM Rackspace Cloud Zadara Storage libvirt libguestfs OVirt Virtual Machine Manager Wakame-vdc Virtual Private Cloud OnDemand Technologies Cloud database Data centers Distributed file system for cloud Internet Networking Security Structured storage Virtual appliance Virtualization Web APIs Category Commons Retrieved from "http://en.wikipedia.org/w/index.php?title=Ajax_(programming)&oldid=629758201" Categories: Ajax (programming) Cloud standards Inter-process communication JavaScript Web development Web 2.0 neologisms Hidden categories: Use dmy dates from January 2012 Commons category with local link same as on Wikidata Articles with DMOZ links