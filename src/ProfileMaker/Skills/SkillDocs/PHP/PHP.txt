From Wikipedia, the free encyclopedia Jump to: navigation, search This article is about the scripting language. For other uses, see PHP (disambiguation). PHP Paradigm(s) imperative, functional, object-oriented, procedural, reflective Designed by Rasmus Lerdorf Developer The PHP Group Appeared in 1995; 19 years ago (1995)[1] Stable release 5.6.2[2] / October 16, 2014; 18 days ago (2014-10-16) Preview release 5.6.1RC1[3] / September 11, 2014; 53 days ago (2014-09-11) Typing discipline Dynamic, weak Major implementations Zend Engine, HHVM, Phalanger, Quercus, Project Zero, Parrot Influenced by Perl, C, C++, Java, Tcl[1] Influenced Hack Implementation language C OS Cross-platform License PHP License (most of Zend engine under Zend Engine License) Filename extension(s) .php, .phtml, .php4, .php3, .php5, .phps Website php.net PHP Programming at Wikibooks PHP is a server-side scripting language designed for web development but also used as a general-purpose programming language. As of January 2013[update], PHP was installed on more than 240 million websites (39% of those sampled) and 2.1 million web servers.[4] Originally created by Rasmus Lerdorf in 1994,[5] the reference implementation of PHP (powered by the Zend Engine) is now produced by The PHP Group.[6] While PHP originally stood for Personal Home Page,[5] it now stands for PHP: Hypertext Preprocessor, which is a recursive backronym.[7] PHP code can be simply mixed with HTML code, or it can be used in combination with various templating engines and web frameworks. PHP code is usually processed by a PHP interpreter, which is usually implemented as a web server's native module or a Common Gateway Interface (CGI) executable. After the PHP code is interpreted and executed, the web server sends resulting output to its client, usually in form of a part of the generated web page – for example, PHP code can generate a web page's HTML code, an image, or some other data. PHP has also evolved to include a command-line interface (CLI) capability and can be used in standalone graphical applications.[8] The canonical PHP interpreter, powered by the Zend Engine, is free software released under the PHP License. PHP has been widely ported and can be deployed on most web servers on almost every operating system and platform, free of charge.[9] Despite its popularity, no written specification or standard exists for the PHP language; instead, the canonical PHP interpreter serves as a de facto standard. However, work on creating a formal specification has started in 2014.[10] Contents 1 History 1.1 PHP 6 and Unicode 1.2 PHP 7 1.3 Release history 2 Mascot 3 Syntax 3.1 Data types 3.2 Functions 3.3 Objects 4 Implementations 5 Licensing 6 Development and community 7 Installation and configuration 8 Use 9 Security 10 See also 11 References 12 External links History[edit] Rasmus Lerdorf, who wrote the original Common Gateway Interface (CGI) component, together with Andi Gutmans and Zeev Suraski, who rewrote the parser that formed PHP 3. PHP development began in 1994 when Rasmus Lerdorf wrote a series of Common Gateway Interface (CGI) binaries in C,[6][11][12][13] which he used to maintain his personal homepage. He extended them to add the ability to work with web forms and to communicate with databases, and called this implementation "Personal Home Page/Forms Interpreter" or PHP/FI. PHP/FI could be used to build simple, dynamic web applications. Lerdorf initially announced the release of PHP/FI as "Personal Home Page Tools (PHP Tools) version 1.0" publicly to accelerate bug location and improve the code, on the Usenet discussion group comp.infosystems.www.authoring.cgi on June 8, 1995.[14][15] This release already had the basic functionality that PHP has as of 2013[update]. This included Perl-like variables, form handling, and the ability to embed HTML. The syntax resembled that of Perl but was simpler, more limited and less consistent.[6] Early PHP was not intended to be a new programming language, and grew organically, with Lerdorf noting in retrospect: "I don’t know how to stop it, there was never any intent to write a programming language […] I have absolutely no idea how to write a programming language, I just kept adding the next logical step on the way."[16] A development team began to form and, after months of work and beta testing, officially released PHP/FI 2 in November 1997. One criticism of PHP is that it was not originally designed, but instead it was developed organically;[16] among other things, this has led to inconsistent naming of functions and inconsistent ordering of their parameters.[17] In some cases, the function names were chosen to match the lower-level libraries which PHP was "wrapping",[18] while in some very early versions of PHP the length of the function names was used internally as a hash function, so names were chosen to improve the distribution of hash values.[19] Zeev Suraski and Andi Gutmans rewrote the parser in 1997 and formed the base of PHP 3, changing the language's name to the recursive acronym PHP: Hypertext Preprocessor.[6] Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new rewrite of PHP's core, producing the Zend Engine in 1999.[20] They also founded Zend Technologies in Ramat Gan, Israel.[6] On May 22, 2000, PHP 4, powered by the Zend Engine 1.0, was released.[6] As of August 2008 this branch reached version 4.4.9. PHP 4 is no longer under development nor will any security updates be released.[21][22] On July 13, 2004, PHP 5 was released, powered by the new Zend Engine II.[6] PHP 5 included new features such as improved support for object-oriented programming, the PHP Data Objects (PDO) extension (which defines a lightweight and consistent interface for accessing databases), and numerous performance enhancements.[23] In 2008 PHP 5 became the only stable version under development. Late static binding had been missing from PHP and was added in version 5.3.[24][25] Many high-profile open-source projects ceased to support PHP 4 in new code as of February 5, 2008, because of the GoPHP5 initiative,[26] provided by a consortium of PHP developers promoting the transition from PHP 4 to PHP 5.[27][28] Over time, PHP interpreters became available on most existing 32-bit and 64-bit operating systems, either by building them from the PHP source code, or by using pre-built binaries.[29] For the PHP versions 5.3 and 5.4, the only available Microsoft Windows binary distributions were 32-bit x86 builds,[30][31] requiring Windows 32-bit compatibility mode while using Internet Information Services (IIS) on a 64-bit Windows platform. PHP version 5.5 made the 64-bit x86-64 builds available for Microsoft Windows.[32] PHP 6 and Unicode[edit] PHP received mixed reviews due to lacking native Unicode support at the core language level.[33][34] In 2005, a project headed by Andrei Zmievski was initiated to bring native Unicode support throughout PHP, by embedding the International Components for Unicode (ICU) library, and representing text strings as UTF-16 internally.[35] Since this would cause major changes both to the internals of the language and to user code, it was planned to release this as version 6.0 of the language, along with other major features then in development.[36] However, a shortage of developers who understood the necessary changes, and performance problems arising from conversion to and from UTF-16, which is rarely used in a web context, led to delays in the project.[37] As a result, a PHP 5.3 release was created in 2009, with many non-Unicode features back-ported from PHP 6, notably namespaces. In March 2010, the project in its current form was officially abandoned, and a PHP 5.4 release was prepared containing most remaining non-Unicode features from PHP 6, such as traits and closure re-binding.[38] Initial hopes were that a new plan would be formed for Unicode integration, but as of 2014 none has been adopted. PHP 7[edit] As of 2014[update], work is underway on a new major PHP version named PHP 7. There was some dispute as to whether the next major version of PHP was to be called PHP 6 or PHP 7. While the PHP 6 unicode experiment had never been released, a number of articles and book titles referenced the old PHP 6 name, which might have caused confusion if a new release were to reuse the PHP 6 name.[39] After a vote, the name PHP 7 was chosen.[40] PHP 7 gets its foundations from an experimental PHP branch that was originally named PHPNG (PHP Next Generation), which aims at optimizing PHP performance by refactoring the Zend Engine while retaining near-complete language compatibility. As of 14 July 2014[update], WordPress-based benchmarks, which serve as the main benchmark suite for PHPNG project, show an almost 100% increase in performance.[41] Changes from PHPNG are also expected to make it easier to improve performance in the future, as more compact data structures and other changes are seen as better suited for a successful migration to a just-in-time (JIT) compiler.[42] PHP 7 will also contain an improved variable syntax which is internally consistent and complete, resolving a long-standing issue in PHP. This will allow use of ->, [], (), {}, and :: operators with arbitrary meaningful left-hand-side expressions.[43] Release history[edit] Key Color Meaning Development Red Old release No development Yellow Stable release Security fixes Green Stable release Bug and security fixes Blue Future release New features Version Release date Supported until[44] Notes 1.0 8 June 1995 Officially called "Personal Home Page Tools (PHP Tools)". This is the first use of the name "PHP".[6] 2.0 1 November 1997 Officially called "PHP/FI 2.0". This is the first release that could actually be characterised as PHP, being a standalone language with many features that have endured to the present day. 3.0 6 June 1998 20 October 2000 Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewrite the base for this version.[6] 4.0 22 May 2000 23 June 2001 Added more advanced two-stage parse/execute tag-parsing system called the Zend engine.[45] 4.1 10 December 2001 12 March 2002 Introduced 'superglobals' ($_GET, $_POST, $_SESSION, etc.)[45] 4.2 22 April 2002 6 September 2002 Disabled register_globals by default. Data received over the network is not inserted directly into the global namespace anymore, closing possible security holes in applications.[45] 4.3 27 December 2002 31 March 2005 Introduced the command-line interface (CLI), to supplement the CGI.[45][46] 4.4 11 July 2005 7 August 2008 Fixed a memory corruption bug, which required breaking binary compatibility with extensions compiled against PHP version 4.3.x.[47] 5.0 13 July 2004 5 September 2005 Zend Engine II with a new object model.[48] 5.1 24 November 2005 24 August 2006 Performance improvements with introduction of compiler variables in re-engineered PHP Engine.[48] Added PHP Data Objects (PDO) as a consistent interface for accessing databases.[49] 5.2 2 November 2006 6 January 2011 Enabled the filter extension by default. Native JSON support.[48] 5.3 30 June 2009 14 August 2014 Namespace support; late static bindings, jump label (limited goto), closures, PHP archives (phar), garbage collection for circular references, improved Windows support, sqlite3, mysqlnd as a replacement for libmysql as underlying library for the extensions that work with MySQL, fileinfo as a replacement for mime_magic for better MIME support, the Internationalization extension, and deprecation of ereg extension. 5.4 1 March 2012 September 2015[50] Trait support, short array syntax support. Removed items: register_globals, safe_mode, allow_call_time_pass_reference, session_register(), session_unregister() and session_is_registered(). Built-in web server.[51] Several improvements to existing features, performance and reduced memory requirements. 5.5 20 June 2013 June 2016[52] Support for generators, finally blocks for exceptions handling, OpCache (based on Zend Optimizer+) bundled in official distribution.[53] 5.6 28 August 2014 August 2017[52] Constant scalar expressions, variadic functions, argument unpacking, new exponentiation operator, extensions of the use statement for functions and constants, new phpdbg debugger as a SAPI module, and other smaller improvements.[54] Beginning on June 28, 2011, the PHP Group began following a timeline for when new versions of PHP will be released.[52] Under this timeline, at least one release should occur every month. Once per year, a minor release should occur which can include new features. Every minor release should at least have 2 years of security and bug fixes, followed by at least 1 year of only security fixes, for a total of a 3 year release process for every minor release. No new features (unless small and self-contained) will be introduced into a minor release during the 3-year release process. Mascot[edit] The mascot of the PHP project is the elePHPant,[55] a blue (sometimes differently colored when in plush toy form) elephant with the PHP logo on its side. The ElePHPant, PHP mascot A plush toy elePHPant Syntax[edit] Main article: PHP syntax and semantics The following Hello world program is written in PHP code embedded in an HTML document: 
<!DOCTYPE html>
<html>
    <head>
        <title>PHP Test</title>
    </head>
    <body>
        <?php echo '<p>Hello World</p>'; ?>
    </body>
</html>
 However, as PHP does not need to be embedded in HTML or used with a web server, the simplest version of a Hello World program can be written like this, with the closing tag omitted as preferred in files containing pure PHP code[56] (prior to PHP 5.4.0, this short syntax for echo() only works with the short_open_tag configuration setting enabled, while for PHP 5.4.0 and later it is always available):[57][58][59] 
<?= 'Hello world';
 The PHP interpreter only executes PHP code within its delimiters. Anything outside its delimiters is not processed by PHP (although non-PHP text is still subject to control structures described in PHP code). The most common delimiters are <?php to open and ?> to close PHP sections. <script language="php"> and </script> delimiters are also available, as are the shortened forms <? or <?= (which is used to echo back a string or variable) and ?> as well as ASP-style short forms <% or <%= and %>. Short delimiters make script files less portable, since support for them can be disabled in the local PHP configuration, and they are therefore discouraged.[59][60] The purpose of all these delimiters is to separate PHP code from non-PHP code, including HTML.[61] The first form of delimiters, <?php and ?>, in XHTML and other XML documents, creates correctly formed XML "processing instructions".[62] This means that the resulting mixture of PHP code and other markup in the server-side file is itself well-formed XML. Variables are prefixed with a dollar symbol, and a type does not need to be specified in advance. PHP 5 introduced type hinting that allows functions to force their parameters to be objects of a specific class, arrays, interfaces or callback functions. However, type hints can not be used with scalar types such as integer or string.[63] Unlike function and class names, variable names are case sensitive. Both double-quoted ("") and heredoc strings provide the ability to interpolate a variable's value into the string.[64] PHP treats newlines as whitespace in the manner of a free-form language, and statements are terminated by a semicolon.[65] PHP has three types of comment syntax: /* */ marks block and inline comments; // as well as # are used for one-line comments.[66] The echo statement is one of several facilities PHP provides to output text, e.g., to a web browser. In terms of keywords and language syntax, PHP is similar to most high level languages that follow the C style syntax. if conditions, for and while loops, and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl. Data types[edit] PHP stores whole numbers in a platform-dependent range, either a 64-bit or 32-bit signed integer equivalent to the C-language long type. Unsigned integers are converted to signed values in certain situations; this behavior is different from other programming languages.[67] Integer variables can be assigned using decimal (positive and negative), octal, hexadecimal, and binary notations. Floating point numbers are also stored in a platform-specific range. They can be specified using floating point notation, or two forms of scientific notation.[68] PHP has a native Boolean type that is similar to the native Boolean types in Java and C++. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in Perl and C++.[68] The null data type represents a variable that has no value; NULL is the only allowed value for this data type.[68] Variables of the "resource" type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file, image, and database resources.[68] Arrays can contain elements of any type that PHP can handle, including resources, objects, and even other arrays. Order is preserved in lists of values and in hashes with both keys and values, and the two can be intermingled.[68] PHP also supports strings, which can be used with single quotes, double quotes, nowdoc or heredoc syntax.[69] The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes.[70] Functions[edit] PHP has hundreds of functions provided by the core language functionality and thousands more available via various extensions; these functions are well documented in the online PHP documentation.[71] However, the built-in library has a wide variety of naming conventions and associated inconsistencies, as described under history above. Additional functions can be defined by the developer: 
function myAge($birthYear)                                       // defines a function, this one is named "myAge"
{
    $yearsOld = date('Y') - $birthYear;                          // calculates the age
    return $yearsOld . ' year' . ($yearsOld != 1 ? 's' : '');    // returns the age in a descriptive form
}
 
echo 'I am currently ' . myAge(1981) . ' old.';                  // outputs the text concatenated
                                                                 // with the return value of myAge()
// As the result of this syntax, myAge() is called.
// In 2014, the output of this sample program will be 'I am currently 33 years old.'
 In PHP, normal functions are not first-class and can only be referenced by their name directly, or dynamically by a variable containing the name of the function (referred to as "variable functions"). User-defined functions can be created at any time without being prototyped.[71][72] Functions can be defined inside code blocks, permitting a run-time decision as to whether or not a function should be defined. Function calls must use parentheses, with the exception of zero-argument class constructor functions called with the PHP new operator, where parentheses are optional. Until PHP 5.3, support for true anonymous functions or closures did not exist in PHP. While create_function() exists since PHP 4.0.1, it is merely a thin wrapper around eval() that allows normal PHP functions to be created during program execution.[73] Also, support for variable functions allows normal PHP functions to be used, for example, as callbacks or within function tables.[72] PHP 5.3 added support for closures, which are true anonymous, first-class functions,[74] whose syntax can be seen in the following example: 
function getAdder($x)
{
    return function($y) use ($x)
    {
        return $x + $y;
    };
}
 
$adder = getAdder(8);
echo $adder(2); // prints "10"
 In the example above, getAdder() function creates a closure using passed argument $x (the keyword use imports a variable from the lexical context), which takes an additional argument $y, and returns the created closure to the caller. Such a function is a first-class object, meaning that it can be stored in a variable, passed as a parameter to other functions, etc.[75] The goto flow control statement is used as in the following example: 
function lock()
{
    $file = fopen('file.txt', 'r+');
 
retry:
    if (!flock($file, LOCK_EX | LOCK_NB))
        goto retry;
 
    fwrite($file, 'Success!');
    fclose($file);
}
 When flock() is called, PHP opens a file and tries to lock it. The target label retry: defines the point to which execution should return if flock() is unsuccessful and goto retry; is called. The goto statement is restricted and requires that the target label be in the same file and context. The goto statement has been supported since PHP 5.3. Objects[edit] Basic object-oriented programming functionality was added in PHP 3 and improved in PHP 4.[6] Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance.[76] In previous versions of PHP, objects were handled like value types.[76] The drawback of this method was that the whole object was copied when a variable was assigned or passed as a parameter to a method. In the new approach, objects are referenced by handle, and not by value. PHP 5 introduced private and protected member variables and methods, along with abstract classes, final classes, abstract methods, and final methods. It also introduced a standard way of declaring constructors and destructors, similar to that of other object-oriented languages such as C++, and a standard exception handling model. Furthermore, PHP 5 added interfaces and allowed for multiple interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. Objects implementing ArrayAccess can be used with array syntax and objects implementing Iterator or IteratorAggregate can be used with the foreach language construct. There is no virtual table feature in the engine, so static variables are bound with a name instead of a reference at compile time.[77] If the developer creates a copy of an object using the reserved word clone, the Zend engine will check whether a __clone() method has been defined. If not, it will call a default __clone() which will copy the object's properties. If a __clone() method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source object, so the programmer can start with a by-value replica of the source object and only override properties that need to be changed.[78] The following is a basic example of object-oriented programming in PHP: 
class Person
{
    public $firstName;
    public $lastName;
 
    public function __construct($firstName, $lastName = '') { // optional second argument
        $this->firstName = $firstName;
        $this->lastName  = $lastName;
    }
 
    public function greet() {
        return 'Hello, my name is ' . $this->firstName .
               (($this->lastName != '') ? (' ' . $this->lastName) : '') . '.';
    }
 
    public static function staticGreet($firstName, $lastName) {
        return 'Hello, my name is ' . $firstName . ' ' . $lastName . '.';
    }
}
 
$he    = new Person('John', 'Smith');
$she   = new Person('Sally', 'Davis');
$other = new Person('iAmine');
 
echo $he->greet(); // prints "Hello, my name is John Smith."
echo '<br />';
 
echo $she->greet(); // prints "Hello, my name is Sally Davis."
echo '<br />';
 
echo $other->greet(); // prints "Hello, my name is iAmine."
echo '<br />';
 
echo Person::staticGreet('Jane', 'Doe'); // prints "Hello, my name is Jane Doe."
 The visibility of PHP properties and methods is defined using the keywords public, private, and protected. The default is public, if only var is used; var is a synonym for public. Items declared public can be accessed everywhere. protected limits access to inherited classes (and to the class that defines the item). private limits visibility only to the class that defines the item.[79] Objects of the same type have access to each other's private and protected members even though they are not the same instance. PHP's member visibility features have sometimes been described as "highly useful."[80] However, they have also sometimes been described as "at best irrelevant and at worst positively harmful."[81] Implementations[edit] The original, only complete and most widely used PHP implementation is powered by the Zend Engine and known simply as PHP. To disambiguate it from other implementations, it is sometimes unofficially referred to as "Zend PHP". The Zend Engine compiles PHP source code on-the-fly into an internal format that it can execute, thus it works as an interpreter.[82][83] It is also the "reference implementation" of PHP, as PHP has no formal specification, and so the semantics of Zend PHP define the semantics of PHP itself. Due to the complex and nuanced semantics of PHP, defined by how Zend works, it is difficult for competing implementations to offer complete compatibility. PHP's single-request-per-script-execution model, and the fact the Zend Engine is an interpreter, lead to inefficiency. As a result, various products have been developed to help improve PHP performance. In order to speed up execution time and not have to compile the PHP source code every time the web page is accessed, PHP scripts can also be deployed in the PHP engine's internal format by using an opcode cache, which works by caching the compiled form of a PHP script (opcodes) in shared memory to avoid the overhead of parsing and compiling the code every time the script runs. An opcode cache, Zend Opcache, is built into PHP since version 5.5.[84] Another example of a widely used opcode cache is the Alternative PHP Cache (APC), which is available as a PECL extension.[85] While Zend PHP is still the most popular implementation, several other implementations have been developed. Some of these are compilers or support JIT compilation, and hence offer performance benefits over Zend PHP at the expense of lacking full PHP compatibility. Alternative implementations include the following: HipHop Virtual Machine (HHVM) – developed at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly known as an intermediate language), which is then translated into x86-64 machine code dynamically at runtime by a just-in-time (JIT) compiler, resulting in up to 6× performance improvements.[86] Parrot – a virtual machine designed to run dynamic languages efficiently; Pipp transforms the PHP source code into the Parrot intermediate representation, which is then translated into the Parrot's bytecode and executed by the virtual machine. Phalanger – compiles PHP into Common Intermediate Language (CIL) bytecode HipHop – developed at Facebook and available as open source, it transforms the PHP scripts into C++ code and then compiles the resulting code, reducing the server load up to 50%. In early 2013, Facebook deprecated it in favor of HHVM due to multiple reasons, including deployment difficulties and lack of support for the whole PHP language, including the create_function() and eval() constructs.[87] Licensing[edit] PHP is free software released under the PHP License, which stipulates that:[88] Products derived from this software may not be called "PHP", nor may "PHP" appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying "Foo for PHP" instead of calling it "PHP Foo" or "phpfoo". This restriction on use of the name PHP makes the PHP License incompatible with the GNU General Public License (GPL), while the Zend License is incompatible due to an advertising clause similar to that of the original license of BSD.[89] Development and community[edit] PHP includes various free and open-source libraries in its source distribution, or uses them in resulting PHP binary builds. PHP is fundamentally an Internet-aware system with built-in modules for accessing File Transfer Protocol (FTP) servers and many database servers, including PostgreSQL, MySQL, Microsoft SQL Server and SQLite (which is an embedded database), LDAP servers, and others. Numerous functions familiar to C programmers, such as those in the stdio family, are available in standard PHP builds.[90] PHP allows developers to write extensions in C to add functionality to the PHP language. PHP extensions can be compiled statically into PHP or loaded dynamically at runtime. Numerous extensions have been written to add support for the Windows API, process management on Unix-like operating systems, multibyte strings (Unicode), cURL, and several popular compression formats. Other PHP features made available through extensions include integration with IRC, dynamic generation of images and Adobe Flash content, PHP Data Objects (PDO) as an abstraction layer used for accessing databases,[91][92][93][94][95][96][97] and even speech synthesis. Some of the language's core functions, such as those dealing with strings and arrays, are also implemented as extensions.[98] The PHP Extension Community Library (PECL) project is a repository for extensions to the PHP language.[99] Some other projects, such as Zephir, provide the ability for PHP extensions to be created in a high-level language and compiled into native PHP extensions. Such an approach, instead of writing PHP extensions directly in C, simplifies the development of extensions and reduces the time required for programming and testing.[100] Zend Technologies provides a certification exam for programmers to become certified PHP developers. Installation and configuration[edit] There are two primary ways for adding support for PHP to a web server – as a native web server module, or as a CGI executable. PHP has a direct module interface called Server Application Programming Interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS, Netscape (now defunct) and iPlanet. Some other web servers, such as OmniHTTPd, support the Internet Server Application Programming Interface (ISAPI), which is a Microsoft's web server module interface. If PHP has no module support for a web server, it can always be used as a Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files.[101] PHP-FPM (FastCGI Process Manager) is an alternative FastCGI implementation for PHP, bundled with the official PHP distribution since version 5.3.3.[102] When compared to the older FastCGI implementation, it contains some additional features, mostly useful for heavily loaded web servers.[103] When using PHP for command-line scripting, a PHP command-line interface (CLI) executable is needed. PHP supports a CLI SAPI as of PHP 4.3.0.[104] The main focus of this SAPI is developing shell applications using PHP. There are quite a few differences between the CLI SAPI and other SAPIs, although they do share many of the same behaviors.[105] PHP can also be used for writing desktop graphical user interface (GUI) applications, by using the PHP-GTK extension. PHP-GTK is not included in the official PHP distribution,[101] and as an extension it can be used only with PHP versions 5.1.0 and newer. The most common way of installing PHP-GTK is compiling it from the source code.[106] When PHP is installed and used in cloud environments, software development kits (SDKs) are provided for using cloud-specific features. For example: Amazon Web Services provides the AWS SDK for PHP[107] Windows Azure can be used with the Windows Azure SDK for PHP.[108] Numerous configuration options are supported, affecting both core PHP features and extensions.[109][110] Configuration file php.ini is searched for in different locations, depending on the way PHP is used.[111] The configuration file is split into various sections,[112] while some of the configuration options can be also set within the web server configuration.[113] Use[edit] A broad overview of the LAMP software bundle, displayed here together with Squid. PHP is a general-purpose scripting language that is especially suited to server-side web development, in which case PHP generally runs on a web server. Any PHP code in a requested file is executed by the PHP runtime, usually to create dynamic web page content or dynamic images used on websites or elsewhere.[114] It can also be used for command-line scripting and client-side graphical user interface (GUI) applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems (RDBMS). Most web hosting providers support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.[9] PHP acts primarily as a filter,[115] taking input from a file or stream containing text and/or PHP instructions and outputting another stream of data. Most commonly the output will be HTML, although it could be JSON, XML or binary data such as image or audio formats. Since PHP 4, the PHP parser compiles input to produce bytecode for processing by the Zend Engine, giving improved performance over its interpreter predecessor.[116] Originally designed to create dynamic web pages, PHP now focuses mainly on server-side scripting,[117] and it is similar to other server-side scripting languages that provide dynamic content from a web server to a client, such as Microsoft's ASP.NET, Sun Microsystems' JavaServer Pages,[118] and mod_perl. PHP has also attracted the development of many software frameworks that provide building blocks and a design structure to promote rapid application development (RAD). Some of these include PRADO, CakePHP, Symfony, CodeIgniter, Laravel, Yii Framework, and Zend Framework, offering features similar to other web application frameworks. The LAMP architecture has become popular in the web industry as a way of deploying web applications.[119] PHP is commonly used as the P in this bundle alongside Linux, Apache and MySQL, although the P may also refer to Python, Perl, or some mix of the three. Similar packages, WAMP and MAMP, are also available for Windows and OS X, with the first letter standing for the respective operating system. Although both PHP and Apache are provided as part of the Mac OS X base install, users of these packages seek a simpler installation mechanism that can be more easily kept up to date. As of April 2007[update], over 20 million Internet domains had web services hosted on servers with PHP installed and mod_php was recorded as the most popular Apache HTTP Server module.[120] As of October 2010[update], PHP was used as the server-side programming language on 75% of all websites whose server-side programming language was known[121] (as of February 2014[update], the percentage had reached 82%[121]), and PHP was the most-used open source software within enterprises.[122] Web content management systems written in PHP include MediaWiki,[123] Joomla, eZ Publish, SilverStripe,[124] WordPress,[125] Drupal,[126] Moodle,[127] the user-facing portion of Facebook,[128] and Digg.[129] For specific and more advanced usage scenarios, PHP offers a well defined and documented way for writing custom extensions in C or C++.[130][131][132][133][134][135][136] Besides extending the language itself in form of additional libraries, extensions are providing a way for improving execution speed where it is critical and there is room for improvements by using a true compiled language.[137][138] PHP also offers well defined ways for embedding itself into other software projects. That way PHP can be easily used as an internal scripting language for another project, also providing tight interfacing with the project's specific internal data structures.[139] PHP received mixed reviews due to lacking support for multithreading at the core language level,[140] though using threads is made possible by the "pthreads" PECL extension.[141][142] Security[edit] In 2013, 9% of all vulnerabilities listed by the National Vulnerability Database were linked to PHP;[143] historically, about 30% of all vulnerabilities listed since 1996 in this database are linked to PHP. Technical security flaws of the language itself or of its core libraries are not frequent (22 in 2009, about 1% of the total although PHP applies to about 20% of programs listed).[144] Recognizing that programmers make mistakes, some languages include taint checking to automatically detect the lack of input validation which induces many issues. Such a feature is being developed for PHP,[145] but its inclusion into a release has been rejected several times in the past.[146][147] There are advanced protection patches such as Suhosin and Hardening-Patch, especially designed for web hosting environments.[148] There are certain language features and configuration parameters (primarily the default values for such runtime settings) that make PHP prone to security issues. Among these, magic_quotes_gpc and register_globals[149] configuration directives are the best known; the latter made any URL parameters become PHP variables, opening a path for serious security vulnerabilities by allowing an attacker to set the value of any uninitialized global variable and interfere with the execution of a PHP script. Support for "magic quotes" and "register globals" has been deprecated as of PHP 5.3.0, and removed as of PHP 5.4.0.[149][150] Another example for the runtime settings vulnerability comes from failing to disable PHP execution (via engine configuration directive)[151] for the directory where uploaded images are stored; leaving the default settings can result in execution of malicious PHP code embedded within the uploaded images.[152][153][154] Also, leaving enabled the dynamic loading of PHP extensions (via enable_dl configuration directive)[155] in a shared web hosting environment can lead to security issues.[156][157] Also, implied type conversions that result in incompatible values being treated as identical against the programmer's intent can lead to security issues. For example, the result of 0e1234 == 0 comparison will be true because the first compared value will be treated as scientific notation of a number (0×101234) with value of zero. This feature resulted in authentication vulnerabilities in Simple Machines Forum,[158] Typo3[159] and phpBB[160] when MD5 password hashes were compared. Instead, identity operator (===) should be used; 0e1234 === 0 results in false.[161] See also[edit] Computer programming portal Free software portal PEAR (PHP Extension and Application Repository) PHP Extension Community Library (PECL) PHP accelerator List of PHP accelerators List of AMP packages List of PHP editors PHP-GTK Template processor XAMPP (Free and open source cross-platform web server solution stack package) Zend Server Hack (programming language) Comparison of programming languages Comparison of web application frameworks References[edit] ^ a b Lerdorf, Rasmus (2007-04-26). "PHP on Hormones – history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California". The Conversations Network. Retrieved 2009-12-11.  ^ "PHP 5.6.2 released". "News Archive - 2014". php.net. 2014-10-16. Retrieved 2014-10-16.  ^ "Welcome to the PHP Quality Assurance Team Web Page.". PHP: Quality Assurance. The PHP Group. Retrieved 21 September 2014.  ^ Ide, Andy (2013-01-31). "PHP just grows & grows". Retrieved 2013-04-01.  ^ a b "History of PHP". php.net.  ^ a b c d e f g h i j "History of PHP and related projects". The PHP Group. Retrieved 2008-02-25.  ^ PHP Manual: Preface, www.php.net ^ "Introduction: What can PHP do?". PHP Manual. Retrieved 2009-03-05.  ^ a b "Embedding PHP in HTML". O'Reilly. 2001-05-03. Retrieved 2008-02-25.  ^ Jackson, Joab (2014-07-31). "PHP gets a formal specification, at last". ITworld. IDG.  ^ Lerdorf, Rasmus (2012-07-20). "I wonder why people keep writing that PHP was ever written in Perl. It never was. #php". Twitter. Retrieved 2014-09-04.  ^ Lerdorf, Rasmus (2007-04-26). "PHP on Hormones" (mp3). The Conversations Network. Retrieved 2009-06-22.  ^ Lerdorf, Rasmus (2007). "Slide 3". slides for 'PHP on Hormones' talk. The PHP Group. Retrieved 2009-06-22.  ^ Lerdorf, Rasmus (June 8, 1995). "Announce: Personal Home Page Tools (PHP Tools)". Retrieved 7 June 2011.  ^ Lerdorf, Rasmus (1995-06-08). "Announce: Personal Home Page Tools (PHP Tools)". comp.infosystems.www.authoring.cgi. Web link. Retrieved 2006-09-17. ^ a b "Rasmus Lerdorf, Senior Technical Yahoo: PHP, Behind the Mic". 2003-11-19. Archived from the original on 2013-07-28. , cited at Felipe Ribeiro (Aug 7, 2012). "This Is Not Another "PHP Sucks" Article".  ^ "Problems with PHP". Retrieved 20 December 2010.  ^ "php.internals: Re: Function name consistency". News.php.net. 2013-12-28. Retrieved 2014-02-09.  ^ Rasmus Lerdorf (Dec 16, 2013). "Re: Flexible function naming". php.internals. Web link. Retrieved December 26, 2013. ^ "Zend Engine version 2.0: Feature Overview and Design". Zend Technologies Ltd. Retrieved 2006-09-17.  ^ "php.net 2007 news archive". The PHP Group. 2007-07-13. Retrieved 2008-02-22.  ^ Kerner, Sean Michael (2008-02-01). "PHP 4 is Dead—Long Live PHP 5". InternetNews. Retrieved 2008-03-16.  ^ Trachtenberg, Adam (2004-07-15). "Why PHP 5 Rocks!". O'Reilly. Retrieved 2008-02-22.  ^ "Late Static Binding in PHP". Digital Sandwich. 2006-02-23. Retrieved 2008-03-25.  ^ "Static Keyword". The PHP Group. Retrieved 2008-03-25.  ^ "GoPHP5".  ^ GoPHP5. "PHP projects join forces to Go PHP 5" (PDF). GoPHP5 Press Release. Retrieved 2008-02-23.  ^ "GoPHP5". GoPHP5. Retrieved 2008-02-22.  ^ "PHP Installation and Configuration". php.net. Retrieved 2013-10-29.  ^ "PHP for Windows: Binaries and sources releases (5.3)". php.net. Retrieved 2013-10-29.  ^ "PHP for Windows: Binaries and sources releases (5.4)". php.net. Retrieved 2013-10-29.  ^ "PHP for Windows: Binaries and sources releases (5.5)". php.net. Retrieved 2013-10-29.  ^ "Types: Strings". PHP Manual. PHP.net. Retrieved 2013-09-22.  ^ "Details of the String Type". PHP Manual. PHP.net. Retrieved 2013-09-22.  ^ Andrei Zmievski (2005-08-10). "PHP Unicode support design document (mailing list post)". Retrieved 2014-02-09.  ^ "PHP 5.5 or 6.0". Retrieved 2014-02-09.  ^ Andrei Zmievski. "The Good, the Bad, and the Ugly: What Happened to Unicode and PHP 6". Retrieved 2014-02-09.  ^ Rasmus Lerdorf (2010-03-11). "PHP 6 (mailing list post)". Retrieved 2014-02-07.  ^ "RFC: Name of Next Release of PHP". 2014-07-07. Retrieved 2014-07-15.  ^ "Re: [PHP-DEV] [VOTE][RFC] Name of Next Release of PHP (again)". 2014-07-30. Retrieved 2014-07-30.  ^ "PHP: phpng". PHP.net. Retrieved 2014-07-15.  ^ https://wiki.php.net/rfc/phpng ^ "PHP RFC: Uniform Variable Syntax". 2014-05-31. Retrieved 2014-07-30.  ^ "Unsupported Branches". PHP. Retrieved 2014-09-28.  ^ a b c d "PHP: PHP 4 ChangeLog". The PHP Group. 2008-01-03. Retrieved 2008-02-22.  ^ "Using PHP from the command line". PHP Manual. The PHP Group. Retrieved 2009-09-11.  ^ "PHP 4.4.0 Release Announcement". PHP Mannual. The PHP Group. Retrieved 2013-11-24.  ^ a b c "PHP: PHP 5 ChangeLog". The PHP Group. 2007-11-08. Retrieved 2008-02-22.  ^ "PHP manual: PDO". The PHP Group. 2011-11-15. Retrieved 2011-11-15.  ^ "PHP 5.4.33 Released". Retrieved 2014-09-19.  ^ "Built-in web server". Retrieved March 26, 2012.  ^ a b c "PHP: Release Process". 2011-06-20. Retrieved 2013-10-06.  ^ "PHP 5.5.0 changes". Retrieved 2013-06-20.  ^ "Migrating from PHP 5.5.x to PHP 5.6.x". php.net. Retrieved 2014-03-24.  ^ "PHP: ElePHPant". 4 Oct 2014. Retrieved 4 Oct 2014.  ^ "tags - Manual". PHP. Retrieved 2014-02-17.  ^ "echo - Manual". PHP. Retrieved 2014-02-17.  ^ "Description of core php.ini directives - Manual". PHP. 2002-03-17. Retrieved 2014-02-17.  ^ a b "PHP: rfc:shortags". php.net. 2008-04-03. Retrieved 2014-05-08.  ^ "PHP: Basic syntax". The PHP Group. Retrieved 2008-02-22.  ^ "Your first PHP-enabled page". The PHP Group. Retrieved 2008-02-25.  ^ Bray, Tim; et al (26 November 2008). "Processing Instructions". Extensible Markup Language (XML) 1.0 (Fifth Edition). W3C. Retrieved 2009-06-18.  ^ "Type hinting". PHP manual. php.net. Retrieved 2014-06-12.  ^ "Variables". The PHP Group. Retrieved 2008-03-16.  ^ "Instruction separation". The PHP Group. Retrieved 2008-03-16.  ^ "Comments". The PHP Group. Retrieved 2008-03-16.  ^ "Integers in PHP, running with scissors, and portability". MySQL Performance Blog. March 27, 2007. Retrieved 2007-03-28.  ^ a b c d e "Types". The PHP Group. Retrieved 2008-03-16.  ^ "Strings". The PHP Group. Retrieved 2008-03-21.  ^ "SPL — StandardPHPLibrary". PHP.net. March 16, 2009. Retrieved 2009-03-16.  ^ a b "User-defined functions". PHP manual. php.net. 2014-07-04. Retrieved 2014-07-07.  ^ a b "Variable functions". PHP manual. php.net. 2014-07-04. Retrieved 2014-07-07.  ^ "create_function()". PHP manual. php.net. 2014-07-04. Retrieved 2014-07-07.  ^ "Anonymous functions". PHP manual. php.net. 2014-07-04. Retrieved 2014-07-07.  ^ Christian Seiler; Dmitry Stogov (2008-07-01). "Request for Comments: Lambda functions and closures". php.net. Retrieved 2014-07-07.  ^ a b "PHP 5 Object References". mjtsai. Retrieved 2008-03-16.  ^ "Classes and Objects (PHP 5)". The PHP Group. Retrieved 2008-03-16.  ^ "Object cloning". The PHP Group. Retrieved 2008-03-16.  ^ "Visibility". PHP Manual. Theserverpages.com. 2005-05-19. Retrieved 2010-08-26.  ^ Gervasio, Alejandro. "More on Private Methods with PHP 5 Member Visibility". devshed.com. Retrieved 24 November 2010.  ^ "Visibility in PHP: Public, Private and Protected". Aperiplus.sourceforge.net. Retrieved 2010-08-26.  ^ "How do computer languages work?". Retrieved 2009-11-04.  ^ (Gilmore 2006, p. 43) ^ "[VOTE] Integrating Zend Optimizer+ into the PHP distribution". PHP.net. Retrieved 2013-03-08.  ^ "Alternative PHP Cache". PHP.net. Retrieved 2013-09-21.  ^ "We are the 98.5% (and the 16%) « HipHop Virtual Machine". Hhvm.com. December 2013. Retrieved 2014-02-23.  ^ "Announcement on GitHub removing HPHPc support". Retrieved 2013-05-24.  ^ "The PHP License, version 3.01". Retrieved 2010-05-20.  ^ "GPL-Incompatible, Free Software Licenses". Various Licenses and Comments about Them. Free Software Foundation. Retrieved 2011-01-03.  ^ "PHP Function List". The PHP Group. Retrieved 2008-02-25.  ^ "Introduction - Manual". PHP. 2013-06-07. Retrieved 2013-06-13.  ^ O'Reilly Networks - ONLamp ^ IBM DeveloperWorks ^ "Five common PHP database problems". 128.ibm.com. 2006-08-01. Retrieved 2013-06-13.  ^ IBM Redbooks ^ php|architect ^ Info ^ Cross Reference: /PHP_5_4/ext/standard/ ^ "Developing Custom PHP Extensions". devnewz. 2002-09-09. Archived from the original on 2008-02-18. Retrieved 2008-02-25.  ^ "Why Zephir?". zephir-lang.com. 2014-04-28. Retrieved 2014-07-15.  ^ a b "General Installation Considerations". PHP.net. Retrieved 2013-09-22.  ^ "News Archive: PHP 5.3.3 Released!". PHP.net. 2010-07-22.  ^ "FastCGI Process Manager (FPM)". PHP.net. Retrieved 2013-09-22.  ^ "Command line usage: Introduction". PHP.net. Retrieved 2013-09-22.  ^ "Command line usage: Differences to other SAPIs". PHP.net. Retrieved 2013-09-22.  ^ "Installing PHP-GTK 2". PHP.net. Retrieved 2013-09-22.  ^ "AWS SDK for PHP". Aws.amazon.com. Retrieved 2014-03-06.  ^ "Windows Azure SDK for PHP - Interoperability Bridges and Labs Center". Interoperabilitybridges.com. Retrieved 2014-03-06.  ^ "Runtime configuration: Table of contents". PHP.net. Retrieved 2013-09-22.  ^ "php.ini directives: List of php.ini directives". PHP.net. Retrieved 2013-09-22.  ^ "Runtime configuration: The configuration file". PHP.net. Retrieved 2013-09-22.  ^ "php.ini directives: List of php.ini sections". PHP.net. Retrieved 2013-09-22.  ^ "Runtime configuration: Where a configuration setting may be set". PHP.net. Retrieved 2013-09-22.  ^ "PHP Manual Image Processing and GD;". php.net. Retrieved 2011-04-09.  ^ Archived June 11, 2008 at the Wayback Machine[not in citation given] ^ "PHP and MySQL". University of Alabama. Archived from the original on 2008-02-28. Retrieved 2008-02-25.  ^ "PHP Server-Side Scripting Language". Indiana University. 2007-04-04. Retrieved 2008-02-25.  ^ "JavaServer Pages Technology — JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper". Sun Microsystems. Retrieved 2008-02-25.  ^ "Five simple ways to tune your LAMP application".  ^ "PHP: PHP Usage Stats". SecuritySpace. 2007-04-01. Retrieved 2008-02-24.  ^ a b "Usage of server-side programming languages for websites". W3Techs. 2010-10-29. Retrieved 2010-10-29.  ^ "PHP and Perl crashing the enterprise party".  ^ "Manual:Installation requirements#PHP". MediaWiki. 2010-01-25. Retrieved 2010-02-26. "PHP is the programming language in which MediaWiki is written [...]"  ^ "Server requirements of SilverStripe". Retrieved 13 October 2014. "SilverStripe requires PHP 5.3.2+"  ^ "About WordPress". Retrieved 2010-02-26. "WordPress was [...] built on PHP"  ^ "PHP and Drupal". Drupal.org. Retrieved 2010-06-13.  ^ "About". Moodle.org. Retrieved 2009-12-20.  ^ "PHP and Facebook | Facebook". Blog.facebook.com. Retrieved 2009-07-29.  ^ "PHP and Digg". O'Reilly. Retrieved 2010-06-13.  ^ "PHP at the core: Extension structure". PHP.net. Retrieved 2013-09-22.  ^ "PHP at the core: The "counter" Extension - A Continuing Example". PHP.net. Retrieved 2013-09-22.  ^ "Extension Writing Part I: Introduction to PHP and Zend". Zend Technologies. 2005-03-01. Retrieved 2013-09-22.  ^ "Extension Writing Part II: Parameters, Arrays, and ZVALs". Zend Technologies. 2005-06-06. Retrieved 2013-09-22.  ^ "Extension Writing Part II: Parameters, Arrays, and ZVALs [continued]". Zend Technologies. 2005-06-06. Retrieved 2013-09-22.  ^ "Extension Writing Part III: Resources". Zend Technologies. 2006-05-12. Retrieved 2013-09-22.  ^ "Wrapping C++ Classes in a PHP Extension". Zend Technologies. 2009-04-22. Retrieved 2013-09-22.  ^ "Extending PHP with C++?". Stack Overflow. Retrieved 2013-09-22.  ^ "How can I use C++ code to interact with PHP?". Stack Overflow. Retrieved 2013-09-22.  ^ Golemon, Sara (2006). Extending and Embedding PHP. ISBN 978-0-672-32704-9.  ^ "Bug Request #46919: Multi threading". PHP.net. Retrieved 2013-09-22.  ^ "pthreads: Introduction". PHP Manual. PHP.net. Retrieved 2013-09-22.  ^ "PECL :: Package :: pthreads". Pecl.php.net. Retrieved 2014-02-09.  ^ "National Vulnerability Database (NVD) Search Vulnerabilities". Retrieved 2014-03-19.  ^ "PHP-related vulnerabilities on the National Vulnerability Database". 2012-07-05. Retrieved 2013-04-01.  ^ "PHP Taint Mode RFC".  ^ "Developer Meeting Notes, Nov. 2005".  ^ "Taint mode decision, November 2007".  ^ "Hardened-PHP Project". 2008-08-15.  ^ a b "Security: Using Register Globals". PHP Manual. PHP.net. Retrieved 2013-09-22.  ^ "Magic Quotes". PHP Manual. PHP.net. Retrieved 2014-01-17.  ^ "'engine' configuration directive". PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13.  ^ "PHP Security Exploit With GIF Images". 2007-06-22. Retrieved 2013-09-22.  ^ "PHP security exploit with GIF images". PHP Classes blog. 2007-06-20. Retrieved 2013-09-22.  ^ "Passing Malicious PHP Through getimagesize()". 2007-06-04. Retrieved 2013-09-22.  ^ "'enable_dl' configuration directive". PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13.  ^ "PHP function reference: dl()". PHP.net. Retrieved 2013-09-22.  ^ "My host won't fix their Trojan". WebHosting Talk. Retrieved 2013-09-22.  ^ Raz0r. "Simple Machines Forum <= 2.0.3 Admin Password Reset".  ^ Nibble Security. "TYPO3-SA-2010-020, TYPO3-SA-2010-022 EXPLAINED".  ^ Ahack.ru. "Криптостойкость и небезопасное сравнение".  ^ "Comparison operators". PHP.net.  External links[edit] Find more about PHP at Wikipedia's sister projects Media from Commons Textbooks from Wikibooks Learning resources from Wikiversity Documentation on PHP from MediaWiki Listen to this article (info/dl) Sorry, your browser either has JavaScript disabled or does not have any supported player. You can download the clip or download a player to play the clip in your browser. This audio file was created from a revision of the "PHP" article dated 2011-11-23, and does not reflect subsequent edits to the article. (Audio help) More spoken articles Official website PHP at DMOZ PHP Reference Manual PHP source code repository @ Github v t e PHP People Andi Gutmans Rasmus Lerdorf Zeev Suraski Resources Composer Zend Engine Libraries PEAR Editors Accelerator Implementations HHVM HPHPc Quercus Project Zero Phalanger Parrot Frameworks CakePHP CodeIgniter Drupal eZ Publish Fat-Free FuelPHP Horde Joomla! Laravel Lithium Midgard MODx Nette Framework PRADO Phalcon Qcodo SilverStripe Symfony TYPO3 WordPress Xaraya XOOPS Yii Zend Framework Zeta Components Testing PHPUnit PHP Unit Testing Framework SimpleTest Lime (Symfony) Behat ORMs Propel Doctrine IDEs Eclipse PDT AppFlower Aptana PhpStorm NetBeans RadPHP PHPEdit Zend Studio Codelobster Compiler Phalanger Widget toolkit wxPHP PHP-Qt PHP-GTK Category Commons v t e Web interfaces Server-side Protocols CGI SCGI FCGI AJP APIs C NSAPI C ASAPI C ISAPI COM ASP Java Servlet CIL System.Web.IHttpHandler Python WSGI Ruby Rack JavaScript JSGI Perl PSGI Lua WSAPI Apache modules mod_jk mod_lisp mod_mono mod_parrot mod_perl mod_php mod_proxy mod_python mod_wsgi mod_ruby Phusion Passenger Topics Web resource vs. Web service Open API Webhook Application server comparison Client-side APIs C NPAPI LiveConnect XPConnect C NPRuntime C PPAPI NaCl COM ActiveX Framework APIs W3C Audio Canvas CORS File API Geolocation IndexedDB Microdata SVG Video WebRTC WebSocket Web messaging Web storage Web worker XMLHttpRequest Khronos WebCL WebGL Others Gears Web SQL Database (formerly W3C) Topics Mashup v t e Free and open-source software General Alternative terms for free software Comparison of open source and closed source Comparison of open-source software hosting facilities Formerly proprietary software Free and open-source Android applications Free and open-source software packages Free software Free software events Free software movement Free software project directories Free software web applications Gratis versus libre Long-term support Open-source software Outline SPDX Operating system families AROS BSD Darwin eCos FreeDOS GNU Haiku Inferno Linux Mach MINIX OpenSolaris Plan 9 ReactOS TUD:OS Development Basic For Qt Eclipse Free Pascal FreeBASIC Gambas GCC Java Julia LLVM Lua NetBeans Open64 Perl PHP Python ROSE Ruby Tcl History GNU Haiku Linux Mozilla Application Suite Firefox Thunderbird Organizations Android Open Source Project Apache Software Foundation Blender Foundation The Document Foundation Eclipse Foundation Free Software Foundation Europe India Latin America FreeBSD Foundation freedesktop.org FSMI GNOME Foundation GNU Project Google Code KDE e.V. Linux Foundation Mozilla Foundation Open Knowledge Foundation Open Source Geospatial Foundation Open Source Initiative Software Freedom Conservancy SourceForge Symbian Foundation Ubuntu Foundation VideoLAN Organization Wikimedia Foundation X.Org Foundation Xiph.Org Foundation XMPP Standards Foundation Licenses Apache Artistic Beerware Boost BSD CC0 GNU GPL GNU LGPL ISC MIT MPL Ms-PL/RL WTFPL zlib License types and standards Comparison of free and open-source software licenses Contributor License Agreement Copyfree Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive free software licence Public domain Viral license Challenges Binary blob Digital rights management Free and open-source graphics device driver Comparison of open-source wireless drivers Hardware restrictions License proliferation Mozilla software rebranding Proprietary software SCO–Linux controversies Secure boot Software patents Software security Trusted Computing Related topics The Cathedral and the Bazaar Forking Linux distribution Microsoft Open Specification Promise Revolution OS Book Category Commons Portal Retrieved from "http://en.wikipedia.org/w/index.php?title=PHP&oldid=631950630" Categories: Free compilers and interpreters Procedural programming languages Object-oriented programming languages Text-oriented programming languages PHP programming language Scripting languages Dynamically typed programming languages Cross-platform software Internet terminology Filename extensions High-level programming languages Programming languages created in 1995 Class-based programming languages Hidden categories: All articles with unsourced statements Articles with unsourced statements from April 2010 Good articles Articles containing potentially dated statements from January 2013 All articles containing potentially dated statements Articles containing potentially dated statements from 2013 Articles containing potentially dated statements from 2014 Articles containing potentially dated statements from July 2014 Articles containing potentially dated statements from April 2007 Articles containing potentially dated statements from October 2010 Articles containing potentially dated statements from February 2014 Spoken articles Articles with hAudio microformats Articles with DMOZ links