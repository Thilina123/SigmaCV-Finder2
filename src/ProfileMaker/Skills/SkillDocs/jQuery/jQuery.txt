From Wikipedia, the free encyclopedia Jump to: navigation, search jQuery Original author(s) John Resig Developer(s) jQuery Team Initial release August 26, 2006 (2006-08-26) Stable release 1.11.1 (May 1, 2014 (2014-05-01)) 2.1.1 (May 1, 2014 (2014-05-01)) Development status Active Written in JavaScript Platform See Browser support Size ver gzip prod dev 1.x 31 90.9 266 2.x 27.7 81.6 236 (KB) Type JavaScript library License MIT[1] Website jquery.com jQuery is a cross-platform JavaScript library designed to simplify the client-side scripting of HTML.[2] Used by over 60% of the 10,000 most visited websites,[3] jQuery is the most popular JavaScript library in use today.[4][5] jQuery is free, open source software, licensed under the MIT License.[1] jQuery's syntax is designed to make it easier to navigate a document, select DOM elements, create animations, handle events, and develop Ajax applications. jQuery also provides capabilities for developers to create plug-ins on top of the JavaScript library. This enables developers to create abstractions for low-level interaction and animation, advanced effects and high-level, theme-able widgets. The modular approach to the jQuery library allows the creation of powerful dynamic web pages and web applications. The set of jQuery core features—DOM element selections, traversal and manipulation—enabled by its selector engine (named "Sizzle" from v1.3), created a new "programming style", fusing algorithms and DOM data structures. This style influenced the architecture of other JavaScript frameworks like YUI v3 and Dojo, later stimulating the creation of the standard Selectors API.[6] Microsoft and Nokia bundle jQuery on their platforms.[7] Microsoft includes it with Visual Studio[8] for use within Microsoft's ASP.NET AJAX framework and ASP.NET MVC Framework while Nokia has integrated it into the Web Run-Time widget development platform.[9] jQuery has also been used in MediaWiki since version 1.16.[10] Contents 1 Overview 2 Features 2.1 Browser support 3 Usage 3.1 Including the library 3.2 Usage styles 3.3 No-Conflict Mode 3.4 Typical start-point 3.5 Chaining 3.6 Creating new DOM elements 3.7 Utility Functions 3.8 AJAX 3.8.1 Asynchronous 4 jQuery plug-ins 5 History 5.1 Release history 6 Testing framework 7 See also 8 References 9 Further reading 10 External links Overview[edit] jQuery, at its core, is a DOM manipulation library. The DOM is a tree structure representation of all the elements of a web-page, and jQuery makes finding, selecting, and manipulating these DOM elements simple and convenient. For example, jQuery can be used for finding an element in the document with a certain property (e.g. all elements with an h1 tag), changing one or more of its attributes (e.g. color, visibility), or making it respond to an event (e.g. a mouse click). Beyond basic DOM selecting and manipulation, jQuery provides a new paradigm for event handling in Javascript. The event assignment and the event callback function definition are done in a single step in a single location in the code. jQuery also aims to incorporate other highly used Javascript functionalities (e.g. fade ins and fade outs when hiding elements, animations by manipulating CSS properties). The advantages of using jQuery are: Separates Javascript and HTML: Instead of using HTML attributes to call Javascript functions for event handling, jQuery can be used to handle events purely in Javascript. Thus, the HTML tags and Javascript can be completely separated. Brevity and Clarity: jQuery promotes brevity and clarity with features like chain-able functions and shorthand function names. Eliminates cross-browser incompatibilities: The Javascript engines of different browsers differ slightly, so Javascript code that works for one browser may not work on the other. jQuery handles all these cross-browser inconsistencies and provides a consistent interface that works across different browsers. Extensible: jQuery makes extending the framework very simple. New events, elements and methods can be easily added and then reused as a plugin. Features[edit] jQuery includes the following features: DOM element selections using the multi-browser open source selector engine Sizzle, a spin-off of the jQuery project[11] DOM manipulation based on CSS selectors that uses elements' names and attributes, such as id and class, as criteria to select nodes in the DOM Events Effects and animations AJAX Deferred and Promise objects to control asynchronous processing JSON parsing Extensibility through plug-ins Utilities, such as user agent information, feature detection Compatibility methods that are natively available in modern browsers but need fall backs for older ones, such as inArray() and each() Multi-browser (not to be confused with cross-browser) support Browser support[edit] Both versions 1.x and 2.x of jQuery support "current-1 versions" (meaning the current stable version of the browser and the version that preceded it) of Firefox, Google Chrome, Safari, and Opera.Version 1.x also supports Internet Explorer 6 or higher. However, jQuery version 2.x dropped Internet Explorer 6–8 support (which represents less than 28% of all browsers in use) and supports only IE 9 and later versions.[12] Usage[edit] Including the library[edit] The jQuery library is a single JavaScript file, containing all of its common DOM, event, effects, and Ajax functions. It can be included within a web page by linking to a local copy, or to one of the many copies available from public servers. jQuery has a CDN hosted by MaxCDN[13] (moved from MediaTemple[14] and, before that, Amazon[15]). Google[16] and Microsoft[17] host it as well. 
<script src="jquery.js"></script>
 It is also possible to include jQuery directly from content delivery networks. 
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
 Usage styles[edit] jQuery has two usage styles: Via the $ function, which is a factory method for the jQuery object. These functions, often called commands, are chainable as they all return jQuery objects. Via $.-prefixed functions. These are utility functions, which do not act upon the jQuery object directly. Typically in jQuery, access to and manipulation of multiple DOM nodes begins with calling the $ function with a CSS selector string. This returns a jQuery object referencing all the matching elements in the HTML page. For example, $("div.test") returns a jQuery object with all the div elements of class test. This node set can be manipulated by calling methods on the returned jQuery object or on the nodes themselves. No-Conflict Mode[edit] jQuery also includes .noConflict() mode, which relinquishes control of $. This can be helpful if jQuery is used with other libraries that also use $ as an identifier. In no-conflict mode, developers can use jQuery as a replacement for $ without losing functionality.[18] Typical start-point[edit] The typical jQuery usage is to put initialization code and event handling functions in .ready(). This is triggered when the browser has constructed the DOM and sends a load event. 
<script type="text/javascript">
$(document).ready(function(){
        // jQuery code, event handling callbacks here
});
</script>
 Callback functions for event handling are also included inside .ready() as anonymous functions but called when the event for the callback is triggered. For example, the following jQuery code adds an event handler for a mouse click on an img image element. 
$(document).ready(function(){
        $('img').click ( function() { 
              // handle the click event on any img element in the page
        });
});
 Chaining[edit] Each jQuery command returns a jQuery object, so commands can be chained: 
$("div.test").add("p.quote").addClass("blue").slideDown("slow");
 This line finds the union of all div tags with class attribute test and all p tags with class attribute quote, adds the class attribute blue to each matched element, and then increases their height with an animation. The $ and add functions affect the matched set, while the addClass and slideDown affect the referenced nodes. Creating new DOM elements[edit] Besides accessing DOM nodes through jQuery object hierarchy, it is also possible to create new DOM elements if a string passed as the argument to $() looks like HTML. For example, this line finds an HTML select element with ID carmakes, and adds an option element with value "VAG" and text "Volkswagen": 
$('select#carmakes').append($('<option />').attr({value:"VAG"}).append("Volkswagen"));
 Utility Functions[edit] The functions prefixed with $. are utility functions or functions that affect global properties and behaviour. For example, the following is an example of a function used for iterating over arrays called each in jQuery: 
$.each([1,2,3], function() {
  console.log(this + 1);
});
 This writes "2", "3", "4" to the console. AJAX[edit] It is possible to perform browser-independent Ajax queries using $.ajax and associated methods to load and manipulate remote data. 
$.ajax({
  type: "POST",
  url: "example.php",
  data: "name=John&location=Boston"
}).done( function(msg) {
  alert( "Data Saved: " + msg );
}).fail( function( xmlHttpRequest, statusText, errorThrown ) {
  alert(
    "Your form submission failed.\n\n"
      + "XML Http Request: " + JSON.stringify( xmlHttpRequest )
      + ",\nStatus Text: " + statusText
      + ",\nError Thrown: " + errorThrown );
});
 This example posts the data name=John and location=Boston to example.php on the server. When this request finishes successfully, the success function is called to alert the user. If the request fails, it will alert the user to the failure, the status of the request, and the specific error. Asynchronous[edit] Note that the above example uses the deferred nature of $.ajax() to handle its asynchronous nature: .done() and .fail() create callbacks that run only when the asynchronous process is complete. jQuery plug-ins[edit] jQuery's architecture allows developers to create plug-in code to extend its functionality. Currently there are thousands of jQuery plug-ins available on the web[19] that cover a wide range of functionality such as Ajax helpers, web services, datagrids, dynamic lists, XML and XSLT tools, drag and drop, events, cookie handling, and modal windows. An important source of jQuery plug-ins is the plugins subdomain of the jQuery Project website.[19] However, in an effort to rid the site of spam, the plugins in this subdomain were accidentally deleted in December 2011.[20] The new site will include a GitHub-hosted repository, which will require developers to resubmit their plugins and to conform to new submission requirements.[21] There are alternative plug-in search engines[22][23] like jquer.in that take more specialized approaches, such as listing only plug-ins that meet certain criteria (e.g. those that have a public code repository). jQuery provides a "Learning Center" which can help users understand JavaScript and get started developing jQuery plugins.[24] History[edit] jQuery was originally released in January 2006 at BarCamp NYC by John Resig and was influenced by Dean Edwards' earlier cssQuery library.[25] It is currently maintained by a team of developers led by Dave Methvin. Release history[edit] Version number Release date Latest update Size Prod (KB) Additional notes 1.0 August 26, 2006 (2006-08-26) First stable release 1.1 January 14, 2007 (2007-01-14) 1.2 September 10, 2007 (2007-09-10) 1.3 January 14, 2009 (2009-01-14) 55.9 Sizzle Selector Engine introduced into core 1.4 January 14, 2010 (2010-01-14) 1.5 January 31, 2011 (2011-01-31) Deferred callback management, ajax module rewrite 1.6 May 3, 2011 (2011-05-03) Significant performance improvements to the attr() and val() functions 1.7 November 3, 2011 (2011-11-03) New Event APIs: .on() and .off(), while the old APIs are still supported. 1.8 August 9, 2012 (2012-08-09) 91.4 Sizzle Selector Engine rewritten, improved animations and $(html, props) flexibility. 1.9 January 15, 2013 (2013-01-15) 1.9.1 (February 4, 2013 (2013-02-04))[26] Removal of deprecated interfaces and code cleanup 1.10 May 24, 2013 (2013-05-24) 1.10.2 (July 3, 2013 (2013-07-03)) Incorporated bug fixes and differences reported from both the 1.9 and 2.0 beta cycles 1.11 January 24, 2014 (2014-01-24) 1.11.1 (May 1, 2014 (2014-05-01)) 93.5 2.0 April 18, 2013 (2013-04-18) 2.0.3 (July 3, 2013 (2013-07-03)) 81.1 Dropped IE 6–8 support for performance improvements and reduction in filesize 2.1 January 24, 2014 (2014-01-24) 2.1.1 (May 1, 2014 (2014-05-01)) 82.2 Testing framework[edit] QUnit is a test automation framework used to test the jQuery project. The jQuery team developed it as an in-house unit testing library.[27] The jQuery team uses it to test its code and plugins but it can test any generic JavaScript code, including server-side JavaScript code.[27] As of 2011, the jQuery Testing Team uses QUnit with TestSwarm to test each jQuery codebase release.[28] See also[edit] Free software portal Comparison of JavaScript frameworks jQuery UI jQuery Mobile References[edit] ^ a b "License - jQuery Project". jQuery Foundation. Retrieved 2014-07-02.  ^ "jQuery: The write less, do more, JavaScript library". The jQuery Project. Retrieved 29 April 2010.  ^ "JavaScript libraries usage statistics", Analysis by SimilarTech ^ "jQuery Usage Statistics". Retrieved 2013-05-17.  ^ "Usage of JavaScript libraries for websites". W3Techs. Retrieved 2010-07-08.  ^ "Selectors API Level 1, W3C Recommendation" (21 February 2013). This standard turned what was jQuery "helper methods" into Javascript-native ones, and the wide use of jQuery stimulated the fast adption of querySelector/querySelectorAll into main web-browsers. ^ Resig, John (2008-09-28). "jQuery, Microsoft, and Nokia". jQuery Blog. jQuery. Retrieved 2009-01-29.  ^ Guthrie, Scott (2008-09-28). "jQuery and Microsoft". ScottGu's Blog. Retrieved 2009-01-29.  ^ "Guarana UI: A jQuery Based UI Library for Nokia WRT". Forum Nokia. Retrieved 2010-03-30.  ^ "jQuery". MediaWiki. January 19, 2012. Retrieved March 11, 2012.  ^ Resig, John (2009-01-14). "jQuery 1.3 and the jQuery Foundation". jQuery Blog. Retrieved 2009-05-04.  ^ Browser Support | jQuery ^ "jQuery CDN" – http://code.jquery.com/ ^ "replace (mt) with maxcdn on pages/download.md". August 7, 2013. Retrieved December 6, 2013.  ^ "CloudFront CDN for jQuery", November 19th, 2008 by John Resig, blog.jquery.com ^ "Google Libraries API - Developer's Guide". code.google.com. Retrieved March 11, 2012.  ^ "Microsoft Ajax Content Delivery Network". ASP.net. Microsoft Corporation. Retrieved June 19, 2012.  ^ http://api.jquery.com/jquery.noconflict/.  Missing or empty |url= (help) ^ a b "Plugins". The jQuery Project. Retrieved 26 August 2010.  ^ http://blog.jquery.com/2011/12/08/what-is-happening-to-the-jquery-plugins-site/#pluginstldr ^ https://github.com/jquery/plugins.jquery.com ^ "jQuery Plugins Search". Retrieved 13 September 2012.  ^ Kanakiya, Jay. "jquery plugins".  ^ "jQuery Learning Center". jQuery Foundation. Retrieved 2014-07-02.  ^ York, Richard (2009). Beginning JavaScript and CSS Development with jQuery. Wiley. p. 28. ISBN 978-0-470-22779-4.  ^ http://blog.jquery.com/2013/02/04/jquery-1-9-1-released ^ a b "History". qunitjs.com. Retrieved 2014-07-02.  ^ jQuery Testing Team Wiki http://jquerytesting.pbworks.com/w/page/41556026/FrontPage Further reading[edit] Taft, Darryl K. (2006-08-30). "jQuery Eases JavaScript, AJAX Development". eWeek. Retrieved 2009-05-04.  Krill, Paul (2006-08-31). "JavaScript, .Net developers aided in separate project". InfoWorld. Retrieved 2009-05-04.  John Resig (speaker) (2007-04-13). Advancing JavaScript with Libraries (Part 1) (Yahoo! Video). YUI Theater. Retrieved 2009-05-04.  John Resig (speaker) (2007-04-13). Advancing JavaScript with Libraries (Part 2) (Yahoo! Video). YUI Theater. Retrieved 2009-05-04.  External links[edit] Wikimedia Commons has media related to JQuery. Official website API Reference jQuery UI Dmitri Gaskin Google Tech Talk on YouTube, 2008 v t e ECMAScript Dialects ActionScript Caja JavaScript engines asm.js JScript JScript .NET QtScript WMLScript Engines (comparison) Carakan Futhark InScript JavaScriptCore SquirrelFish JScript KJS Linear B Narcissus QtScript Rhino YAJI SpiderMonkey TraceMonkey JägerMonkey Tamarin V8 Chakra Jurassic JScript .NET Jint Nashorn Frameworks, libraries JavaScript (comparison) Client-side (list, Ajax frameworks) Ample SDK Atoms.js Chaplin.js CougarXML Dojo Echo Ext JS Google Web Toolkit jQuery Lively Kernel midori MochiKit MooTools Prototype Pyjamas qooxdoo Rialto Rico script.aculo.us SmartClient SproutCore Spry Wakanda Framework YUI Library Server-side (comparison) AppJet Jaxer Node.js WakandaDB KONA Cloud Libraries (list) Backbone SWFObject SWFAddress Underscore ActionScript PureMVC Multiple implementations Cappuccino JavaScript Objective-J People Brendan Eich Douglas Crockford John Resig Scott Isaacs Other DHTML Ecma International JSDoc JSGI JSHint JSLint JSON JSSS Sputnik SunSpider Asynchronous module definition CommonJS v t e Web application frameworks ASP.NET ASP.NET Dynamic Data ASP.NET MVC ASP.NET Web Forms BFC DotNetNuke MonoRail OpenRasta Umbraco ColdFusion CFWheels ColdBox Platform ColdSpring Fusebox Mach-II Model-Glue Common Lisp CL-HTTP UnCommon Web Weblocks C++ CppCMS Wt Haskell Happstack Yesod Snap Java AppFuse Flexive Grails GWT ICEfaces ItsNat JavaServer Faces Jspx Juzu Makumba OpenXava Play Reasonable Server Faces Remote Application Platform RIFE Seam Spring Stripes Struts Tapestry Vaadin WebWork Wicket WaveMaker ZK JavaScript Ample SDK AngularJS Backbone.js Chaplin.js Closure Dojo Toolkit Ember.js Ext JS jQuery Meteor Prototype Rico script.aculo.us Sencha Touch SproutCore Wakanda Perl Catalyst Dancer Mason Maypole Mojolicious WebGUI PHP AppFlower CakePHP CodeIgniter Drupal eZ Publish Fat-Free FuelPHP Horde Joomla! Kohana Laravel Lithium Midgard MODX Nette Framework Phalcon PRADO Qcodo Seagull SilverStripe Symfony TYPO3 WordPress Xaraya XOOPS Yii Zend Framework Python BlueBream CherryPy Django Flask Grok Nevow Pyjamas Pylons Pyramid Quixote TACTIC Tornado TurboGears web2py Webware Zope 2 Ruby Camping Hobo Merb Padrino Ramaze RailsBricks Ruby on Rails Sinatra Scala Lift Play Scalatra Smalltalk AIDA/Web Seaside Other languages Application Express (PL/SQL) Grails (Groovy) Kepler (Lua) OpenACS (Tcl) SproutCore (JavaScript/Ruby) SymbolicWeb (Clojure) Yaws (Erlang) v t e List of widget toolkits Low-level Macintosh Toolbox/Carbon Intrinsics Intuition Windows API Xlib XCB High-level On AmigaOS BOOPSI MUI ReAction GUI Zune On Mac OS and OS X Carbon Cocoa MacApp MacZoop PowerPlant On Windows MFC OWL Silverlight SmartWin++ VCL Windows Forms WPF WTL WinRT XAML On Unix, under X11 Athena (Xaw) InterViews LessTif Motif OPEN LOOK Cross-platform, by language CLI Gtk# Moonlight Tao C GTK+ IUP Tk XForms XVT Objective-C GNUstep C++ CEGUI CLX FLTK FOX toolkit GLUI Gtkmm Juce Qt Wt TnFOX Ultimate++ VCF wxWidgets YAAF Flash Apache Flex Java desktop AWT Swing SWT Qt Jambi FXML (JavaFX) web GWT FXML (JavaFX) JavaScript Dojo Toolkit Echo Ext JS Google Closure jQuery UI Qooxdoo YUI Common Lisp CAPI Common Graphics CLIM Ltk McCLIM Pascal LCL Object Pascal CLX fpGUI IP Pascal LCL Perl WxPerl Perl/Tk PHP PHP-GTK PHP-Qt WxPHP Python Pyjamas PyQt PyGTK PyGObject PySide Tkinter wxPython Ruby Shoes QtRuby XML Ample SDK CougarXML GladeXML Lively Kernel Pyjamas Rialto Toolkit XAML XUI XUL Wt Retrieved from "http://en.wikipedia.org/w/index.php?title=JQuery&oldid=631614320" Categories: JavaScript libraries Free software programmed in JavaScript Ajax (programming) Software using the MIT license 2006 software Hidden categories: Pages using web citations with no URL Commons category with local link same as on Wikidata